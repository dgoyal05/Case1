import pandas as pd
import re
from google.colab import files
import io

def transform_transaction_data(raw_data):
    """
    Transform raw transaction data into a structured format.

    Parameters:
    raw_data (str): Raw transaction data text from the report

    Returns:
    pandas.DataFrame: Structured transaction data with Date, Transaction Code,
                     Transaction Type, and Amount columns
    """
    # Create lists to store the parsed data
    dates = []
    codes = []
    types = []
    amounts = []
    balances = []

    # Split the raw data into lines
    lines = raw_data.split('\n')
    
    # Exclude the first 4 rows
    lines = lines[4:]

    current_date = None

    for line in lines:
        # Skip header lines and empty lines
        if not line.strip() or 'CH/BR' in line:
            continue

        # Extract date if present
        date_match = re.search(r'\d{2}/\d{2}/\d{2}', line)
        if date_match:
            current_date = date_match.group()

        # Extract debit transactions
        debit_matches = re.findall(r'(\d+(?:,\d{3})*(?:\.\d{2})?)\s*([A-Z]{2,3})', line)
        for amount, code in debit_matches:
            if code not in ['LUR', 'FA', 'AS', 'QC', 'TC', 'RM', 'TX', 'DP', 'FT']:  # Exclude credit codes
                # Remove commas from amount and convert to float
                amount = float(amount.replace(',', ''))
                dates.append(current_date)
                codes.append(code)
                types.append('DEBIT')
                amounts.append(amount)

        # Extract credit transactions
        credit_matches = re.findall(r'([A-Z]{2,3})\s*(\d+(?:,\d{3})*(?:\.\d{2})?)', line)
        for code, amount in credit_matches:
            if code in ['LUR', 'FA', 'AS', 'QC', 'TC', 'RM', 'TX', 'DP', 'FT']:  # Include only credit codes
                # Remove commas from amount and convert to float
                amount = float(amount.replace(',', ''))
                dates.append(current_date)
                codes.append(code)
                types.append('CREDIT')
                amounts.append(amount)

        # Extract balance information
        balance_match = re.search(r'(\d{3}-\d)\s+"?([-0-9,\.]+)"?\s+"?([-0-9,\.]+)"?\s+"?([-0-9,\.]+)"?\s+"?([-0-9,\.]+)"?', line)
        if balance_match:
            balances.append({
                'Charter': balance_match.group(1),
                'Previous Balance': balance_match.group(2),
                'Opening Balance': balance_match.group(3),
                'Net Activity': balance_match.group(4),
                'Closing Balance': balance_match.group(5)
            })

    # Ensure all lists are of the same length
    min_length = min(len(dates), len(codes), len(types), len(amounts))
    dates = dates[:min_length]
    codes = codes[:min_length]
    types = types[:min_length]
    amounts = amounts[:min_length]

    # Create DataFrame for transactions
    df_transactions = pd.DataFrame({
        'Date': dates,
        'Transaction Code': codes,
        'Transaction Type': types,
        'Amount': amounts
    })

    # Filter out None dates and sort by date
    df_transactions = df_transactions.dropna(subset=['Date'])
    df_transactions = df_transactions.sort_values('Date')

    # Create DataFrame for balances
    df_balances = pd.DataFrame(balances)

    return df_transactions, df_balances

# Upload and process file
print("Please upload your text file...")
uploaded = files.upload()

# Process the uploaded file
for filename in uploaded.keys():
    content = uploaded[filename].decode('utf-8')
    df_transactions, df_balances = transform_transaction_data(content)
    print("\nProcessed Data:")
    print(df_transactions)
    print("\nBalance Data:")
    print(df_balances)

    # Save to CSV if needed
    df_transactions.to_csv('structured_transactions.csv', index=False)
    df_balances.to_csv('balances.csv', index=False)
    print("\nData has been saved to 'structured_transactions.csv' and 'balances.csv'")
